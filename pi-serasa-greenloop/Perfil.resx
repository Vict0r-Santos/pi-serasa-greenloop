<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="ptbPerfilAvatar.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        YII=
</value>
  </data>
</root>